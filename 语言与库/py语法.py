_________________________________________基本语法________________________________________________
#1 注释语法
    #这是一个单行注释
    '''
    多行注释1
    '''
    """
    多行注释2
    """
#2 多行语句 \  括号中的多行语句不需要"\"
   #可以在同一行使用多条语句 语句间使用；分隔
#3 类型  数字
    '''
    int bool float complex
    '''
#4 类型  字符串
    # 单双引号用法相同 使用三引号约定多行字符串 ''' """
    # 转义  "\"  使用r可以使字符串内的\不发生转义
    # 链接和重复  +  *
    # 截取 索引采取从左往右0 从右往左-1 并且没有单独的字符类型 字符串的截取的语法格式如下：变量[头下标:尾下标:步长]
    '''
    print(str)                 # 输出字符串
    print(str[0:-1])           # 输出第一个到倒数第二个的所有字符
    print(str[0])              # 输出字符串第一个字符
    print(str[2:5])            # 输出从第三个开始到第五个的字符
    print(str[2:])             # 输出从第三个开始的后的所有字符
    print(str * 2)             # 输出字符串两次
    '''
#5 输入输出
    input()  #input()括号内可以放置内容输出，程序会先输出括号内的内容，读入用户输入的内容，用户键入enter时退出输入
    print("a", end="aaa")  #默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=""： 左侧语句结果为aaaa
#6 代码组和子句
    if expression :   #首句连同其下的代码组一起称 子句clause
        suite    #缩进相同的一组语句称代码组
    elif expression : 
        suite 
    else : 
        suite
#7 导入模块
    '''
    将整个模块(somemodule)导入，格式为： import somemodule
    从某个模块中导入某个函数,格式为： from somemodule import somefunction
    从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc
    将某个模块中的全部函数导入，格式为： from somemodule import *
    '''
#8 一行多句和一句多行
    '''
    一行多句: 用分号隔开即可
    一句多行：若有括号 可以在任何地方换行 否则必须\才可
    '''
_________________________________________标准数据类型________________________________________________

#1 标准数据类型
    #不可变       Number（数字）、String（字符串）、Tuple（元组）；
    #可变         List（列表）、Dictionary（字典）、Set（集合）
#2 判断类型函数    type()   isinstance() 它们的区别
    #type()不会认为子类是一种父类类型
    #isinstance()会认为子类是一种父类类型
#3 数字(Number)
    '''
    Bool类型写作True Flase 但仍可以和int相加
    + - * //(整除)  /(浮点除)
    复数的实部虚部都是浮点型
    '''
    '''
    注：1、Python可以同时为多个变量赋值，如a, b = 1, 2。
    2、一个变量可以通过赋值指向不同类型的对象。
    3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。
    4、在混合计算时，Python会把整型转换成为浮点数
    '''
#4 字符串
    注意py中的字符串 不可变 也就是说不能对字符串中指定位置的字符赋值
    # 单双引号用法相同 使用三引号约定多行字符串 ''' """
    # 转义  "\"  使用r可以使字符串内的\不发生转义
    # 链接和重复  +  *
    # 截取 索引采取从左往右0 从右往左-1 并且没有单独的字符类型 字符串的截取的语法格式如下：变量[头下标:尾下标:步长]
    '''
    print(str)                 # 输出字符串
    print(str[0:-1])           # 输出第一个到倒数第二个的所有字符
    print(str[0])              # 输出字符串第一个字符
    print(str[2:5])            # 输出从第三个开始到第五个的字符
    print(str[2:])             # 输出从第三个开始的后的所有字符
    print(str * 2)             # 输出字符串两次
    print(srt[0::2])           # 输出从第一个字符起每隔2个字符
    '''
#5 元组
    # 元组（tuple）与列表类似，不同之处在于元组的元素不能修改，可以将字符串视为元组的一种。元组写在小括号 () 里，元素之间用逗号隔开。 
    # 元组中的元素类型也可以不相同 
    # 元组也可以被索引、切片、拼接、重复，方法一样。
    注意构造包含 0 或 1 个元素的元组的特殊语法规则：tup1 = ()  空元组    tup2 = (20,) 一个元素，需要在元素后添加逗号

以下为可变数据类型：
#6 列表
    # 列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
    # 列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
    # 和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。截取格式： 列表[头下标:尾下标:步长]
    # 同样支持拼接和重复
    List不同于字符串，内部元素灵活，且可变
    # 内置append()、pop() 等等便捷的方法
#7 集合
    # 可以用大括号{,,,}或者set()函数创建，注意空集创建必须使用set(),因为{}用于创建一个空字典
    # 集合中重复的元素会视为被自动去掉
    # 成员测试： in
    # 集合运算： 差集 a-b  并集 a|b  交集 a&b  不同时 a^b
    注意集合运算产生的集合内元素输出无序
#8 字典
    # 字典是无序的对象集合 通过键值对存取 tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}
    # 字典是一种映射类型，它的元素是键值对。
    # 字典的关键字必须为不可变类型，且不能重复。
    # 创建空字典使用 { }。
#9 强制类型转化
    # https://www.runoob.com/python3/python3-data-type.html
    # eval()： 1.使字符串本身的引号去掉，保留字符的原本属性  2.计算表达式   3.提取用户输入的多个值
总结：
    # 可变：列表[] 集合set() 字典{}             不可变： 数字 字符串 元组()
    # 访问：{} () []可以通过下标或键访问元素     不可访问：set()
    # 有序：元组() 列表[]                       无序： 集合set() 字典{} 


_________________________________________常见运算符________________________________________________
#运算符：
#算术运算符 注意// /和**,其余和C++大致相同
#赋值运算符 相应有**= 和//= /=,其余和C++大致相同
#逻辑运算符 and or not
#成员运算符 in /not in
#身份运算符 用于判断两标识符是否引用同一变量 
    #常数、列表项、字典项、元组整体在值一样情况下相当于== 
    #其他情况须比较值和内存指向 如元组项、列表整体、字典整体、集合整体等
#比较运算符及位运算符 和C++相同

#优先级：
# 指数**  》 
# ~ +-  》 
# %*/ //  》
# +-  》
# >> <<  》 
# &  》 
# |^ 》 
# 比较 》 等于== <> !=  》赋值 》身份 》成员 》逻辑（not > and > or）
_________________________________________数值运算详解________________________________________________

# 在不同的机器上浮点运算/ 的结果可能会不一样
# 注意//得到的不一定是整数 这与分子分母的类型有关系 例如7//2.0=3.0  7.0//2=3.0
# 整数浮点数混合运算时 会在计算中将整数视为浮点数进行计算
# 交互模式中 _代表上次运算的结果 
# Round函数： 
    # 保留到整数 规则为四舍六入五成双   
    # 保留到若干位小数 保留结果不定，不值得信赖   手动判断吧！ 
    # 且round函数不会保存后导0
# 数学模块math 和 随机模块random   https://www.runoob.com/python3/python3-number.html
    # hypot(x, y)       欧几里得范数  
    # randrange ([start,] stop [,step])    [start,stop)范围内的整数 步长为step
    # choice(seq)       从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
    # uniform(x, y)     在[x,y]范围内生成实数
    # shuffle(lst)      将序列的所有元素随机排序
    # radians(x) 和 degrees(x) 角度弧度互化
    # modf(x)           返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
    # 以及math中的其他三角函数  和  基础运算函数
_________________________________________字符串详解________________________________________________
# 定义  访问   更新   转义   运算符    
# 注意：字符串类似一个不能修改内部元素的字符数组  因此可以用in not in    
# 格式化字符串 
    # r/R解转义   \转义    %u：无符号整形   %o：无符号八进制数    %x:无符号十六进制数  %X:无符号十六进制数大写  %e/%E:科学计数  
    # %g/%G:总位数小于设定位数 输出本身形式  否则输出科学计数  注意不同于%e，%g忽略后导0
    # 格式字符串辅助命令 
    # str.format()增强了格式化的能力
# Python3中所有字符串都是Unicode字符串
# 字符串内建函数：   https://www.runoob.com/python3/python3-string.html 

